if (!globalThis.__apiCache) {
  globalThis.__apiCache = {};
}
const _env = ((typeof process === 'object' && process?.env)
    || globalThis);
class ApiError extends Error {
  constructor(config, response, msg, isTimeout = false) {
    if (response) {
      super(response.statusText);
      this.data = response.data;
      this.statusCode = response.status;
    } else {
      super(msg || 'Request error');
    }
    this.config = config;
    this.response = response;
    this.isTimeout = isTimeout;
  }
}
const def = {
  middleware(config) {
    const headers = { ...config.headers };
    if (!config.isNoAuth) {
      if (config.accessToken) {
        // eslint-disable-next-line dot-notation
        headers['Authorization'] = `Bearer ${config.accessToken}`;
      } else {
        const authenticationId = config.authenticationId || _env.ECOM_AUTHENTICATION_ID;
        const apiKey = config.apiKey || _env.ECOM_API_KEY;
        if (authenticationId && apiKey) {
          const rawAuth = `${authenticationId}:${apiKey}`;
          const base64Auth = typeof Buffer === 'function'
            ? Buffer.from(rawAuth).toString('base64') : btoa(rawAuth);
          // eslint-disable-next-line dot-notation
          headers['Authorization'] = `Basic ${base64Auth}`;
        }
      }
    }
    let url = config.baseUrl || _env.API_BASE_URL || 'https://ecomplus.io/v2';
    const { endpoint, params } = config;
    if (endpoint !== 'login'
            && endpoint !== 'authenticate'
            && endpoint !== 'ask-auth-callback'
            && endpoint !== 'check-username') {
      const storeId = config.storeId || _env.ECOM_STORE_ID;
      if (!storeId) {
        throw new Error('`storeId` must be set in config or `ECOM_STORE_ID` env var');
      }
      url += `/:${storeId}`;
      const lang = config.lang || _env.ECOM_LANG;
      if (lang) {
        url += `,lang:${lang}`;
      }
    }
    url += `/${endpoint}`;
    if (typeof params === 'string') {
      url += `?${params}`;
    } else {
      const paramsObj = params || {};
      ['fields', 'sort']
        .forEach((param) => {
          const value = config[param];
          if (value && !paramsObj[param]) {
            paramsObj[param] = value.join(',');
          }
        });
      ['limit', 'offset', 'count', 'buckets', 'concise', 'verbose']
        .forEach((param) => {
          const value = config[param];
          if (value && !paramsObj[param]) {
            paramsObj[param] = value;
          }
        });
      if (Object.keys(paramsObj).length) {
        const searchParams = new URLSearchParams();
        Object.keys(paramsObj).forEach((key) => {
          const values = paramsObj[key];
          if (Array.isArray(values)) {
            values.forEach((value) => {
              // https://github.com/microsoft/TypeScript/issues/32951
              searchParams.append(key, value);
            });
          } else if (values !== undefined) {
            searchParams.append(key, values);
          }
        });
        url += `?${searchParams.toString()}`;
      }
    }
    return { url, headers };
  },
};
const setMiddleware = (middleware) => {
  def.middleware = middleware;
};
const api = async (requestConfig, _retries = 0) => {
  const config = globalThis.$apiMergeConfig
    ? { ...globalThis.$apiMergeConfig, ...requestConfig }
    : requestConfig;
  const { url, headers } = def.middleware(config);
  const method = config.method?.toUpperCase() || 'GET';
  const { timeout = 20000, maxRetries = 3, cacheMaxAge = Number(_env.API_CACHE_MAX_AGE) || 120000 /* 2 minutes */ } = config;
  const canCache = method === 'GET' && config.canCache;
  let cacheKey;
  if (canCache) {
    cacheKey = `${url}${JSON.stringify(headers)}`;
    const cached = globalThis.__apiCache[cacheKey];
    if (cached && Date.now() - cached.timestamp <= cacheMaxAge) {
      return { ...cached.res, config };
    }
  }
  const bodyObject = config.body || config.data;
  let body;
  if (bodyObject) {
    body = JSON.stringify(bodyObject);
    headers['Content-Type'] = 'application/json';
  }
  const abortController = new AbortController();
  let isTimeout = false;
  const timer = setTimeout(() => {
    abortController.abort();
    isTimeout = true;
  }, timeout);
  let response;
  try {
    response = await (config.fetch || fetch)(url, {
      method,
      headers,
      body,
      signal: abortController.signal,
    });
  } catch (err) {
    let msg = err.message;
    if (err.cause) {
      msg += ` - ${err.cause}`;
    }
    throw new ApiError(config, response, msg, isTimeout);
  }
  clearTimeout(timer);
  if (response) {
    if (response.ok) {
      const res = response;
      res.data = response.status !== 204 ? await response.json() : null;
      if (canCache && cacheKey) {
        globalThis.__apiCache[cacheKey] = {
          timestamp: Date.now(),
          res,
        };
      }
      res.config = config;
      return res;
    }
    const { status } = response;
    if (maxRetries < _retries && (status === 429 || status >= 500)) {
      const retryAfter = response.headers.get('retry-after');
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          api(requestConfig, _retries + 1).then(resolve).catch(reject);
        }, (retryAfter && parseInt(retryAfter, 10) * 1000) || 5000);
      });
    }
  }
  try {
    response.data = await response?.json();
  } catch (e) {
    //
  }
  throw new ApiError(config, response);
};
const get = (endpoint, config) => {
  // @ts-ignore
  return api({ ...config, endpoint });
};
const post = (endpoint, body, config) => {
  return api({
    ...config,
    method: 'post',
    endpoint,
    body,
  });
};
const put = (endpoint, body, config) => {
  return api({
    ...config,
    method: 'put',
    endpoint,
    body,
  });
};
const patch = (endpoint, body, config) => {
  return api({
    ...config,
    method: 'patch',
    endpoint,
    body,
  });
};
const del = (endpoint, config) => api({
  ...config,
  method: 'delete',
  endpoint,
});
api.get = get;
api.post = post;
api.put = put;
api.patch = patch;
api.del = del;
api.delete = del;

export default api;

export {
  setMiddleware, get, post, put, patch, del, ApiError,
};
// # sourceMappingURL=api.js.map
