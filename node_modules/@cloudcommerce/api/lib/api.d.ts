import type { Endpoint, Config, ResponseBody, RequestBody, ErrorBody } from '../types.d';
declare global {
    var $apiMergeConfig: Partial<Config> | undefined;
    var __apiCache: Record<string, {
        timestamp: number;
        res: Response & {
            data: any;
        };
    }>;
}
declare class ApiError extends Error {
    config: Config;
    response?: Response & {
        data?: ErrorBody;
    };
    statusCode?: number;
    data?: ErrorBody;
    isTimeout: boolean;
    constructor(config: Config, response?: ApiError['response'], msg?: string, isTimeout?: boolean);
}
declare const def: {
    middleware(config: Config): {
        url: any;
        headers: Headers | Record<string, string>;
    };
};
declare const setMiddleware: (middleware: (config: Config) => {
    url: any;
    headers: Headers | Record<string, string>;
}) => void;
declare const api: {
    <T extends Config & {
        body?: any;
        data?: any;
    }>(requestConfig: T, _retries?: number): Promise<Response & {
        config: Config;
        data: ResponseBody<T>;
    }>;
    get: <E extends Endpoint, C extends AbstractedConfig>(endpoint: E, config?: C | undefined) => Promise<Response & {
        config: Config;
        data: ResponseBody<C & {
            endpoint: E;
        }>;
    }>;
    post: <E extends Endpoint, C extends AbstractedConfig>(endpoint: E, body: RequestBody<{
        endpoint: E;
        method: 'post';
    }>, config?: (E extends "login" | "authenticate" ? AbstractedConfig : C) | undefined) => Promise<Response & {
        config: Config;
        data: E extends "login" ? {
            _id: import("../types.d").ResourceId;
            store_ids: number[];
            api_key: string;
        } : E extends "authenticate" ? {
            my_id: string;
            access_token: string;
            expires: string;
        } : {
            _id: import("../types.d").ResourceId;
        };
    }>;
    put: <E_1 extends import("../types.d").ResourceAndFind | `products/${import("../types.d").ResourceId}/${string}` | `categories/${import("../types.d").ResourceId}/${string}` | `brands/${import("../types.d").ResourceId}/${string}` | `collections/${import("../types.d").ResourceId}/${string}` | `grids/${import("../types.d").ResourceId}/${string}` | `carts/${import("../types.d").ResourceId}/${string}` | `orders/${import("../types.d").ResourceId}/${string}` | `customers/${import("../types.d").ResourceId}/${string}` | `stores/${import("../types.d").ResourceId}/${string}` | `applications/${import("../types.d").ResourceId}/${string}` | `authentications/${import("../types.d").ResourceId}/${string}` | `products/${string}:${string}/${string}` | `categories/${string}:${string}/${string}` | `brands/${string}:${string}/${string}` | `collections/${string}:${string}/${string}` | `grids/${string}:${string}/${string}` | `carts/${string}:${string}/${string}` | `orders/${string}:${string}/${string}` | `customers/${string}:${string}/${string}` | `stores/${string}:${string}/${string}` | `applications/${string}:${string}/${string}` | `authentications/${string}:${string}/${string}` | `stores/me/${string}` | `authentications/me/${string}` | `slugs/${string}` | (("search/v1" | `search/v1?${string}`) | "search/_els" | `search/_els?${string}`) | ("search/v1/history" | `search/v1/history?${string}`) | ("events/products" | "events/categories" | "events/brands" | "events/collections" | "events/grids" | "events/carts" | "events/orders" | "events/customers" | "events/stores" | "events/applications" | "events/authentications" | `events/products/${import("../types.d").ResourceId}` | `events/categories/${import("../types.d").ResourceId}` | `events/brands/${import("../types.d").ResourceId}` | `events/collections/${import("../types.d").ResourceId}` | `events/grids/${import("../types.d").ResourceId}` | `events/carts/${import("../types.d").ResourceId}` | `events/orders/${import("../types.d").ResourceId}` | `events/customers/${import("../types.d").ResourceId}` | `events/stores/${import("../types.d").ResourceId}` | `events/applications/${import("../types.d").ResourceId}` | `events/authentications/${import("../types.d").ResourceId}` | "events/me") | "login" | "authenticate" | "ask-auth-callback" | "check-username" | "$aggregate/products" | "$aggregate/categories" | "$aggregate/brands" | "$aggregate/collections" | "$aggregate/grids" | "$aggregate/carts" | "$aggregate/orders" | "$aggregate/customers" | "schemas/products" | "schemas/categories" | "schemas/brands" | "schemas/collections" | "schemas/grids" | "schemas/carts" | "schemas/orders" | "schemas/customers" | "schemas/stores" | "schemas/applications" | "schemas/authentications", C_1 extends AbstractedConfig>(endpoint: E_1, body: RequestBody<{
        endpoint: E_1;
        method: 'put';
    }>, config?: C_1 | undefined) => Promise<Response & {
        config: Config;
        data: null;
    }>;
    patch: <E_2 extends Endpoint, C_2 extends AbstractedConfig>(endpoint: E_2, body: RequestBody<{
        endpoint: E_2;
        method: 'patch';
    }>, config?: C_2 | undefined) => Promise<Response & {
        config: Config;
        data: null;
    }>;
    del: (endpoint: Endpoint, config?: AbstractedConfig) => Promise<Response & {
        config: Config;
        data: null;
    }>;
    delete: (endpoint: Endpoint, config?: AbstractedConfig) => Promise<Response & {
        config: Config;
        data: null;
    }>;
};
type AbstractedConfig = Omit<Config, 'endpoint' | 'method'>;
declare const get: <E extends Endpoint, C extends AbstractedConfig>(endpoint: E, config?: C | undefined) => Promise<Response & {
    config: Config;
    data: ResponseBody<C & {
        endpoint: E;
    }>;
}>;
declare const post: <E extends Endpoint, C extends AbstractedConfig>(endpoint: E, body: RequestBody<{
    endpoint: E;
    method: 'post';
}>, config?: (E extends "login" | "authenticate" ? AbstractedConfig : C) | undefined) => Promise<Response & {
    config: Config;
    data: E extends "login" ? {
        _id: import("../types.d").ResourceId;
        store_ids: number[];
        api_key: string;
    } : E extends "authenticate" ? {
        my_id: string;
        access_token: string;
        expires: string;
    } : {
        _id: import("../types.d").ResourceId;
    };
}>;
declare const put: <E extends import("../types.d").ResourceAndFind | `products/${import("../types.d").ResourceId}/${string}` | `categories/${import("../types.d").ResourceId}/${string}` | `brands/${import("../types.d").ResourceId}/${string}` | `collections/${import("../types.d").ResourceId}/${string}` | `grids/${import("../types.d").ResourceId}/${string}` | `carts/${import("../types.d").ResourceId}/${string}` | `orders/${import("../types.d").ResourceId}/${string}` | `customers/${import("../types.d").ResourceId}/${string}` | `stores/${import("../types.d").ResourceId}/${string}` | `applications/${import("../types.d").ResourceId}/${string}` | `authentications/${import("../types.d").ResourceId}/${string}` | `products/${string}:${string}/${string}` | `categories/${string}:${string}/${string}` | `brands/${string}:${string}/${string}` | `collections/${string}:${string}/${string}` | `grids/${string}:${string}/${string}` | `carts/${string}:${string}/${string}` | `orders/${string}:${string}/${string}` | `customers/${string}:${string}/${string}` | `stores/${string}:${string}/${string}` | `applications/${string}:${string}/${string}` | `authentications/${string}:${string}/${string}` | `stores/me/${string}` | `authentications/me/${string}` | `slugs/${string}` | (("search/v1" | `search/v1?${string}`) | "search/_els" | `search/_els?${string}`) | ("search/v1/history" | `search/v1/history?${string}`) | ("events/products" | "events/categories" | "events/brands" | "events/collections" | "events/grids" | "events/carts" | "events/orders" | "events/customers" | "events/stores" | "events/applications" | "events/authentications" | `events/products/${import("../types.d").ResourceId}` | `events/categories/${import("../types.d").ResourceId}` | `events/brands/${import("../types.d").ResourceId}` | `events/collections/${import("../types.d").ResourceId}` | `events/grids/${import("../types.d").ResourceId}` | `events/carts/${import("../types.d").ResourceId}` | `events/orders/${import("../types.d").ResourceId}` | `events/customers/${import("../types.d").ResourceId}` | `events/stores/${import("../types.d").ResourceId}` | `events/applications/${import("../types.d").ResourceId}` | `events/authentications/${import("../types.d").ResourceId}` | "events/me") | "login" | "authenticate" | "ask-auth-callback" | "check-username" | "$aggregate/products" | "$aggregate/categories" | "$aggregate/brands" | "$aggregate/collections" | "$aggregate/grids" | "$aggregate/carts" | "$aggregate/orders" | "$aggregate/customers" | "schemas/products" | "schemas/categories" | "schemas/brands" | "schemas/collections" | "schemas/grids" | "schemas/carts" | "schemas/orders" | "schemas/customers" | "schemas/stores" | "schemas/applications" | "schemas/authentications", C extends AbstractedConfig>(endpoint: E, body: RequestBody<{
    endpoint: E;
    method: 'put';
}>, config?: C | undefined) => Promise<Response & {
    config: Config;
    data: null;
}>;
declare const patch: <E extends Endpoint, C extends AbstractedConfig>(endpoint: E, body: RequestBody<{
    endpoint: E;
    method: 'patch';
}>, config?: C | undefined) => Promise<Response & {
    config: Config;
    data: null;
}>;
declare const del: (endpoint: Endpoint, config?: AbstractedConfig) => Promise<Response & {
    config: Config;
    data: null;
}>;
export default api;
export { setMiddleware, get, post, put, patch, del, ApiError, };
export type ApiEndpoint = Endpoint;
export type ApiConfig = Config;
export type ApiErrorBody = ErrorBody;
